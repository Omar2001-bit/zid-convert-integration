// This file is auto-generated by @hey-api/openapi-ts
/**
 * Type of the Audience. Can be one of the following: `permanent`, `transient`. For full-stack projects, `transient` is the only valid option, the rest will be ignored.
 * * **permanent** - A permanent audience is one that is checked only at the time the user is being bucketed into the experience
 * * **transient** - A transient audience is one that is checked every time the user is being bucketed into the experience
 *
 */
const ConfigAudienceTypes = {
    PERMANENT: 'permanent',
    TRANSIENT: 'transient'
};
/**
 * Data sorting direction using "sort_by" field. "asc" for ascending direction, "desc" for descending direction
 *
 * Defaults to **desc** when not sent in a request
 *
 */
const sort_direction = {
    ASC: 'asc',
    DESC: 'desc'
};
/**
 * Type of the visitors
 */
const value = {
    NEW: 'new',
    RETURNING: 'returning'
};
/**
 * Browser name used for matching
 */
const value2 = {
    CHROME: 'chrome',
    MICROSOFT_IE: 'microsoft_ie',
    FIREFOX: 'firefox',
    MICROSOFT_EDGE: 'microsoft_edge',
    MOZILLA: 'mozilla',
    OPERA: 'opera',
    SAFARI: 'safari'
};
/**
 * Operating System name used for matching
 */
const value3 = {
    ANDROID: 'android',
    IPHONE: 'iphone',
    IPOD: 'ipod',
    IPAD: 'ipad',
    WINDOWS: 'windows',
    MACOS: 'macos',
    LINUX: 'linux'
};
/**
 * Weather Conditions
 */
const WeatherConditions = {
    BLIZZARD: 'Blizzard',
    BLOWING_SNOW: 'Blowing snow',
    CLOUDY: 'Cloudy',
    FOG: 'Fog',
    FREEZING_DRIZZLE: 'Freezing drizzle',
    FREEZING_FOG: 'Freezing fog',
    HEAVY_FREEZING_DRIZZLE: 'Heavy freezing drizzle',
    HEAVY_RAIN: 'Heavy rain',
    HEAVY_RAIN_AT_TIMES: 'Heavy rain at times',
    LIGHT_DRIZZLE: 'Light drizzle',
    LIGHT_FREEZING_RAIN: 'Light freezing rain',
    LIGHT_RAIN: 'Light rain',
    MIST: 'Mist',
    MODERATE_RAIN: 'Moderate rain',
    MODERATE_RAIN_AT_TIMES: 'Moderate rain at times',
    OVERCAST: 'Overcast',
    PARTLY_CLOUDY: 'Partly cloudy',
    PATCHY_FREEZING_DRIZZLE_POSSIBLE: 'Patchy freezing drizzle possible',
    PATCHY_LIGHT_DRIZZLE: 'Patchy light drizzle',
    PATCHY_LIGHT_RAIN: 'Patchy light rain',
    PATCHY_RAIN_POSSIBLE: 'Patchy rain possible',
    PATCHY_SLEET_POSSIBLE: 'Patchy sleet possible',
    PATCHY_SNOW_POSSIBLE: 'Patchy snow possible',
    SUNNY: 'Sunny',
    THUNDERY_OUTBREAKS_POSSIBLE: 'Thundery outbreaks possible'
};
const TextMatchRulesTypes = {
    URL: 'url',
    URL_WITH_QUERY: 'url_with_query',
    QUERY_STRING: 'query_string',
    CAMPAIGN: 'campaign',
    KEYWORD: 'keyword',
    MEDIUM: 'medium',
    SOURCE_NAME: 'source_name',
    CITY: 'city',
    REGION: 'region',
    BROWSER_VERSION: 'browser_version',
    USER_AGENT: 'user_agent',
    PAGE_TAG_PAGE_TYPE: 'page_tag_page_type',
    PAGE_TAG_CATEGORY_ID: 'page_tag_category_id',
    PAGE_TAG_CATEGORY_NAME: 'page_tag_category_name',
    PAGE_TAG_PRODUCT_SKU: 'page_tag_product_sku',
    PAGE_TAG_PRODUCT_NAME: 'page_tag_product_name',
    PAGE_TAG_CUSTOMER_ID: 'page_tag_customer_id',
    PAGE_TAG_CUSTOM_1: 'page_tag_custom_1',
    PAGE_TAG_CUSTOM_2: 'page_tag_custom_2',
    PAGE_TAG_CUSTOM_3: 'page_tag_custom_3',
    PAGE_TAG_CUSTOM_4: 'page_tag_custom_4'
};
const NumericMatchRulesTypes = {
    AVG_TIME_PAGE: 'avg_time_page',
    DAYS_SINCE_LAST_VISIT: 'days_since_last_visit',
    PAGES_VISITED_COUNT: 'pages_visited_count',
    VISIT_DURATION: 'visit_duration',
    VISITS_COUNT: 'visits_count',
    PAGE_TAG_PRODUCT_PRICE: 'page_tag_product_price'
};
const BoolMatchRulesTypes = {
    BUCKETED_INTO_EXPERIENCE: 'bucketed_into_experience',
    IS_DESKTOP: 'is_desktop',
    IS_MOBILE: 'is_mobile',
    IS_TABLET: 'is_tablet'
};
const GenericTextKeyValueMatchRulesTypes = {
    GENERIC_TEXT_KEY_VALUE: 'generic_text_key_value'
};
const GenericNumericKeyValueMatchRulesTypes = {
    GENERIC_NUMERIC_KEY_VALUE: 'generic_numeric_key_value'
};
const GenericBoolKeyValueMatchRulesTypes = {
    GENERIC_BOOL_KEY_VALUE: 'generic_bool_key_value'
};
const JsConditionMatchRulesTypes = {
    JS_CONDITION: 'js_condition'
};
const CookieMatchRulesTypes = {
    COOKIE: 'cookie'
};
const CountryMatchRulesTypes = {
    COUNTRY: 'country'
};
const VisitorTypeMatchRulesTypes = {
    VISITOR_TYPE: 'visitor_type'
};
const LanguageMatchRulesTypes = {
    LANGUAGE: 'language'
};
const GoalTriggeredMatchRulesTypes = {
    GOAL_TRIGGERED: 'goal_triggered'
};
const SegmentBucketedMatchRulesTypes = {
    BUCKETED_INTO_SEGMENT: 'bucketed_into_segment'
};
const DayOfWeekMatchRulesTypes = {
    LOCAL_TIME_DAY_OF_WEEK: 'local_time_day_of_week',
    PROJECT_TIME_DAY_OF_WEEK: 'project_time_day_of_week'
};
const HourOfDayMatchRulesTypes = {
    LOCAL_TIME_HOUR_OF_DAY: 'local_time_hour_of_day',
    PROJECT_TIME_HOUR_OF_DAY: 'project_time_hour_of_day'
};
const MinuteOfHourMatchRulesTypes = {
    LOCAL_TIME_MINUTE_OF_HOUR: 'local_time_minute_of_hour',
    PROJECT_TIME_MINUTE_OF_HOUR: 'project_time_minute_of_hour'
};
const BrowserNameMatchRulesTypes = {
    BROWSER_NAME: 'browser_name'
};
const OsMatchRulesTypes = {
    OS: 'os'
};
const WeatherConditionMatchRulesTypes = {
    WEATHER_CONDITION: 'weather_condition'
};
const TextMatchingOptions = {
    MATCHES: 'matches',
    REGEX_MATCHES: 'regexMatches',
    CONTAINS: 'contains',
    ENDS_WITH: 'endsWith',
    STARTS_WITH: 'startsWith'
};
const NumericMatchingOptions = {
    EQUALS_NUMBER: 'equalsNumber',
    LESS: 'less',
    LESS_EQUAL: 'lessEqual'
};
const ChoiceMatchingOptions = {
    EQUALS: 'equals'
};
const ChoiceContainsOptions = {
    CONTAINS: 'contains'
};
const SetMatchingOptions = {
    IS_IN: 'isIn'
};
const type = {
    GA3: 'ga3'
};
const type2 = {
    GA4: 'ga4'
};
/**
 * The way the list is processed. `any` means at least one element in the list is matched.
 * `all` means all elements in the list are matched. Default is any.
 *
 */
const GenericListMatchingOptions = {
    ANY: 'any',
    ALL: 'all'
};
/**
 * Type of the outlier detection mechanism
 */
const NumericOutlierTypes = {
    NONE: 'none',
    MIN_MAX: 'min_max',
    PERCENTILE: 'percentile'
};
const detection_type = {
    NONE: 'none'
};
const detection_type2 = {
    MIN_MAX: 'min_max'
};
const detection_type3 = {
    PERCENTILE: 'percentile'
};
/**
 * List of supported percentiles
 */
const Percentiles = {
    _1: 1,
    _5: 5,
    _10: 10,
    _25: 25,
    _50: 50,
    _75: 75,
    _90: 90,
    _95: 95,
    _99: 99
};
const type3 = {
    RICH_STRUCTURE: 'richStructure',
    CUSTOM_CODE: 'customCode',
    DEFAULT_CODE: 'defaultCode',
    DEFAULT_CODE_MULTIPAGE: 'defaultCodeMultipage',
    DEFAULT_REDIRECT: 'defaultRedirect',
    FULL_STACK_FEATURE: 'fullStackFeature'
};
const type4 = {
    DEFAULT_CODE: 'defaultCode'
};
const type5 = {
    DEFAULT_REDIRECT: 'defaultRedirect'
};
const type6 = {
    DEFAULT_CODE_MULTIPAGE: 'defaultCodeMultipage'
};
const type7 = {
    RICH_STRUCTURE: 'richStructure'
};
const type8 = {
    CUSTOM_CODE: 'customCode'
};
const type9 = {
    FULL_STACK_FEATURE: 'fullStackFeature'
};
/**
 * Describes the provider with which Convert integrates to send experience data
 */
const IntegrationProvider = {
    BAIDU: 'baidu',
    CLICKTALE: 'clicktale',
    CLICKY: 'clicky',
    CNZZ: 'cnzz',
    CRAZYEGG: 'crazyegg',
    ECONDA: 'econda',
    EULERIAN: 'eulerian',
    GOOGLE_ANALYTICS: 'google_analytics',
    GOSQUARED: 'gosquared',
    HEAPANALYTICS: 'heapanalytics',
    HOTJAR: 'hotjar',
    MIXPANEL: 'mixpanel',
    MOUSEFLOW: 'mouseflow',
    PIWIK: 'piwik',
    SEGMENTIO: 'segmentio',
    SITECATALYST: 'sitecatalyst',
    WOOPRA: 'woopra',
    YSANCE: 'ysance'
};
const ExperienceStatuses = {
    DRAFT: 'draft',
    ACTIVE: 'active',
    PAUSED: 'paused',
    COMPLETED: 'completed',
    SCHEDULED: 'scheduled'
};
const ExperienceTypes = {
    A_B: 'a/b',
    A_A: 'a/a',
    MVT: 'mvt',
    SPLIT_URL: 'split_url',
    MULTIPAGE: 'multipage',
    DEPLOY: 'deploy'
};
/**
 * Variation status
 */
const VariationStatuses = {
    STOPPED: 'stopped',
    RUNNING: 'running'
};
/**
 * A variable's type
 */
const type10 = {
    BOOLEAN: 'boolean',
    FLOAT: 'float',
    JSON: 'json',
    INTEGER: 'integer',
    STRING: 'string'
};
const type11 = {
    DOM_INTERACTION: 'dom_interaction'
};
const type12 = {
    SCROLL_PERCENTAGE: 'scroll_percentage'
};
const type13 = {
    REVENUE: 'revenue'
};
const type14 = {
    ADVANCED: 'advanced',
    VISITS_PAGE: 'visits_page',
    CODE_TRIGGER: 'code_trigger'
};
const type15 = {
    GA_IMPORT: 'ga_import'
};
const type16 = {
    SUBMITS_FORM: 'submits_form'
};
const type17 = {
    CLICKS_LINK: 'clicks_link'
};
const type18 = {
    CLICKS_ELEMENT: 'clicks_element'
};
/**
 * Type of the revenue goal tracking, one of the below.
 * * "manual" - goal will be triggered through the given revenue tracking code;
 * An empty **triggering_rule** has to be provided as that takes priority over manual triggering
 * * "ga" - Convert will attempt to pick revenue from GA revenue tracking code and attach it to this goal,
 * when on page where this goal is triggered via "triggering_rule"
 *
 */
const triggering_type = {
    MANUAL: 'manual',
    GA: 'ga'
};
/**
 * Goals type, one of below.
 */
const GoalTypes = {
    ADVANCED: 'advanced',
    DOM_INTERACTION: 'dom_interaction',
    SCROLL_PERCENTAGE: 'scroll_percentage',
    CODE_TRIGGER: 'code_trigger',
    REVENUE: 'revenue'
};
/**
 * Describes possible location trigger types.
 * Note that `upon_run` is always the case for **fullstack** projects.
 *
 */
const LocationTriggerTypes = {
    UPON_RUN: 'upon_run',
    MANUAL: 'manual',
    DOM_ELEMENT: 'dom_element',
    CALLBACK: 'callback'
};
const type19 = {
    UPON_RUN: 'upon_run'
};
const type20 = {
    MANUAL: 'manual'
};
/**
 * Allowed events for LocationTriggerDomElement
 */
const LocationDomTriggerEvents = {
    CLICK: 'click',
    HOVER: 'hover',
    IN_VIEW: 'in_view',
    CHANGE: 'change'
};
const type21 = {
    DOM_ELEMENT: 'dom_element'
};
const type22 = {
    CALLBACK: 'callback'
};
/**
 * Value which describes project product type
 */
const type23 = {
    FULLSTACK: 'fullstack',
    WEB: 'web'
};
/**
 * Follow the 'Do not track' browser settings for users in the mentioned area of the world.
 */
const do_not_track = {
    OFF: 'OFF',
    EU_ONLY: 'EU ONLY',
    EEA_ONLY: 'EEA ONLY',
    WORLDWIDE: 'Worldwide'
};
/**
 * Follow Global Privacy Control (GPC) signals for users in the mentioned area of the world.
 * - OFF: Do not follow GPC signals.
 * - EU ONLY: Follow GPC signals for users in the European Union only.
 * - EEA ONLY: Follow GPC signals for users in the European Economic Area only.
 * - Worldwide: Follow GPC signals for users worldwide.
 *
 */
const global_privacy_control = {
    OFF: 'OFF',
    EU_ONLY: 'EU ONLY',
    EEA_ONLY: 'EEA ONLY',
    WORLDWIDE: 'Worldwide'
};
/**
 * Type of the event. It can be a bucketing or a conversion event
 */
const eventType = {
    BUCKETING: 'bucketing',
    CONVERSION: 'conversion'
};
/**
 * Browser used:
 * IE - Internet Explorer
 * CH - Chrome
 * FF - Firefox
 * OP - Opera
 * SF - Safari
 * OTH - Other
 *
 */
const browser = {
    IE: 'IE',
    CH: 'CH',
    FF: 'FF',
    OP: 'OP',
    SF: 'SF',
    OTH: 'OTH'
};
/**
 * Traffic source
 */
const source = {
    CAMPAIGN: 'campaign',
    SEARCH: 'search',
    REFERRAL: 'referral',
    DIRECT: 'direct'
};
/**
 * Type of the visitor
 */
const visitorType = {
    NEW: 'new',
    RETURNING: 'returning'
};

export { BoolMatchRulesTypes, BrowserNameMatchRulesTypes, ChoiceContainsOptions, ChoiceMatchingOptions, ConfigAudienceTypes, CookieMatchRulesTypes, CountryMatchRulesTypes, DayOfWeekMatchRulesTypes, ExperienceStatuses, ExperienceTypes, GenericBoolKeyValueMatchRulesTypes, GenericListMatchingOptions, GenericNumericKeyValueMatchRulesTypes, GenericTextKeyValueMatchRulesTypes, GoalTriggeredMatchRulesTypes, GoalTypes, HourOfDayMatchRulesTypes, IntegrationProvider, JsConditionMatchRulesTypes, LanguageMatchRulesTypes, LocationDomTriggerEvents, LocationTriggerTypes, MinuteOfHourMatchRulesTypes, NumericMatchRulesTypes, NumericMatchingOptions, NumericOutlierTypes, OsMatchRulesTypes, Percentiles, SegmentBucketedMatchRulesTypes, SetMatchingOptions, TextMatchRulesTypes, TextMatchingOptions, VariationStatuses, VisitorTypeMatchRulesTypes, WeatherConditionMatchRulesTypes, WeatherConditions, browser, detection_type, detection_type2, detection_type3, do_not_track, eventType, global_privacy_control, sort_direction, source, triggering_type, type, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type2, type20, type21, type22, type23, type3, type4, type5, type6, type7, type8, type9, value, value2, value3, visitorType };
//# sourceMappingURL=index.mjs.map
